import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils

# Load the Iris dataset
iris_data = pd.read_csv('iris.csv')

# Preprocessing the dataset
X = iris_data.iloc[:, :-1].values
y = iris_data.iloc[:, -1].values

# Encode the categorical target variable
encoder = LabelEncoder()
y = encoder.fit_transform(y)
y = np_utils.to_categorical(y)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Function to create the model
def create_model(activation):
    model = Sequential()
    model.add(Dense(8, input_dim=4, activation=activation))
    model.add(Dense(3, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

# List of activation functions to evaluate
activation_functions = ['sigmoid', 'tanh', 'relu']

best_accuracy = 0
best_activation = ''

# Iterate through activation functions and evaluate the model
for activation in activation_functions:
    model = KerasClassifier(build_fn=create_model, activation=activation, epochs=100, batch_size=5, verbose=0)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(np.argmax(y_test, axis=1), y_pred)
    print(f'Accuracy with {activation} activation function: {accuracy}')

    # Update the best activation function
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_activation = activation

print(f'\nBest activation function for Iris data: {best_activation} with accuracy {best_accuracy}')
